AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Chaos on venus

Globals:
  Function:
    Runtime: nodejs8.10
    Environment:
      Variables:
        CONFIG_FILE: "config.json"
        REGION: "eu-west-3"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
              - lambda:InvokeFunction
              - lambda:InvokeAsync
              Resource: "*"

  RunDay:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "runDay"
      Handler: routine-service/index.runDay
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./src
      Timeout: 60
      Events:
        MyTimeApi:
          Type: Api
          Properties:
            Path: /runDay
            Method: GET

  GetStateLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "getStateLambda"
      Handler: colony-repository/index.getStateLambda
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./src

  GetInitialState:
    Type: AWS::Serverless::Function
    Properties:
      Handler: colony-repository/index.getStateApi
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./src
      Events:
        MyTimeApi:
          Type: Api
          Properties:
            Path: /getstate
            Method: GET

  InitDB:
    Type: AWS::Serverless::Function
    Properties:
      Handler: colony-repository/index.initDB
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./src
      Events:
        MyTimeApi:
          Type: Api
          Properties:
            Path: /initDB
            Method: GET

  CheckRessources:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "checkRessources"
      Handler: chaos-api/index.checkRessources
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./src
      Events:
        MyTimeApi:
          Type: Api
          Properties:
            Path: /ressource
            Method: GET

  GetRessources:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "getRessources"
      Handler: colony-repository/index.getRessources
      CodeUri: ./src

  GetWorkers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "getWorkers"
      Handler: colony-repository/index.getWorkers
      CodeUri: ./src

  UpdateWorkers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "updateWorker"
      Handler: colony-repository/index.updatedWorker
      CodeUri: ./src

  GetInfrastructure:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "getInfrastructures"
      Handler: colony-repository/index.getInfrastructures
      CodeUri: ./src

  SetInfrastructure:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "setInfrastructures"
      Handler: colony-repository/index.setInfrastructures
      CodeUri: ./src

  Consume:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "consume"
      Handler: colony-repository/index.consume
      CodeUri: ./src
      
  Refill:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "refill"
      Handler: colony-repository/index.refill
      CodeUri: ./src

  AddWorkForceToInfrastructureAndGetOutPuts:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "addWorkForceToInfrastructureAndGetOutPuts"
      Handler: colony-repository/index.addWorkForceToInfrastructureAndGetOutPuts
      CodeUri: ./src